buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.liquibase:liquibase-core:4.27.0'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.liquibase.gradle' version '3.0.1'
}

group = 'com.modsen'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

ext {
    springCloudVersion = '2023.0.1'
    springBootVersion = '3.3.4'
    springBootValidationVersion = '3.3.1'
    springBootWebVersion = '3.3.0'
    springDocVersion = '2.0.2'
    mapstructVersion = '1.5.5.Final'
    liquibaseVersion = '4.27.0'
    liquibaseGroovyDslVersion = '3.0.2'
    picocliVersion = '4.6.1'
    testContainersVersion = '1.19.7'
    cucumberVersion = '7.16.1'
    lokiVersion = '1.4.2'
    cabAggregatorStarterVersion = '0.0.1'
    minioVersion = '8.5.2'
    logbookVersion = '3.10.0'
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom("org.testcontainers:testcontainers-bom:${testContainersVersion}")
    }
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"
    implementation "org.springframework.kafka:spring-kafka"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "com.github.loki4j:loki-logback-appender:${lokiVersion}"
    implementation "org.codehaus.janino:janino"
    implementation "org.zalando:logbook-spring-boot-starter:${logbookVersion}"

    implementation "org.springframework.boot:spring-boot-starter-cache"
    implementation "org.springframework.boot:spring-boot-starter-data-redis"

    implementation("com.modsen:cab-aggregator-exception-spring-boot-starter:${cabAggregatorStarterVersion}") {
        exclude group: "org.springframework.boot"
        exclude group: "org.springframework.security"
        exclude group: "org.springdoc"
        exclude group: "org.projectlombok"
    }

    implementation("com.modsen:cab-aggregator-security-spring-boot-starter:${cabAggregatorStarterVersion}") {
        exclude group: "org.springframework.boot"
        exclude group: "org.springframework.security"
        exclude group: "org.springdoc"
        exclude group: "org.projectlombok"
    }

    implementation "org.liquibase:liquibase-core:${liquibaseVersion}"
    implementation "org.postgresql:postgresql"

    implementation "io.micrometer:micrometer-tracing"
    implementation "io.micrometer:micrometer-tracing-bridge-otel"
    implementation "io.opentelemetry:opentelemetry-exporter-zipkin"
    implementation "io.github.openfeign:feign-micrometer"

    implementation "io.minio:minio:${minioVersion}"

    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"

    implementation "org.springframework.security:spring-security-oauth2-resource-server"
    implementation "org.springframework.security:spring-security-oauth2-jose"
    implementation "org.springframework.boot:spring-boot-starter-security"

    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocVersion}"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.boot:spring-boot-testcontainers"
    testImplementation "org.testcontainers:postgresql"
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "io.rest-assured:rest-assured"
    testImplementation "io.cucumber:cucumber-java:${cucumberVersion}"
    testImplementation "io.cucumber:cucumber-junit:${cucumberVersion}"
    testImplementation "io.cucumber:cucumber-junit-platform-engine:${cucumberVersion}"
    testImplementation "org.junit.vintage:junit-vintage-engine"
    testCompileOnly 'org.projectlombok:lombok'
}

dependencies {
    liquibaseRuntime "org.liquibase:liquibase-core:${liquibaseVersion}"
    liquibaseRuntime "org.liquibase:liquibase-groovy-dsl:${liquibaseGroovyDslVersion}"
    liquibaseRuntime "info.picocli:picocli:${picocliVersion}"
    liquibaseRuntime "org.postgresql:postgresql"
}

liquibase {
    activities {
        main {
            changelogFile "db/changelog/main-changelog.xml"
            url System.getenv("LIQUIBASE_URL") ?: "jdbc:postgresql://localhost:5433/passengers"
            username System.getenv("LIQUIBASE_USERNAME") ?: "postgres"
            password System.getenv("LIQUIBASE_PASSWORD") ?: "postgres"
            classpath sourceSets.main.output.asPath
        }
    }
}

tasks.named('test') {
    useJUnitPlatform {
        exclude "**/CucumberRunnerTest.class"
    }
}

tasks.register("cucumberTest", Test) {
    useJUnitPlatform {
        include "**/CucumberRunnerTest.class"
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
}

